# -*- coding: utf-8 -*-
"""R&D.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ywXWDBKzhfxwy4snUADgZ2CInX1HswC8
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier

# Assuming 'scaler' and 'mlp' are already defined and trained

def process_csv_and_predict(csv1, csv2, output_csv):
    # Load the CSV files
    df1 = pd.read_csv(csv1)
    df2 = pd.read_csv(csv2)

    # Combine the dataframes
    df = pd.concat([df1, df2])

    # Keep only the necessary columns
    df = df[['INSTANCE', 'temperature', 'voltage', 'value']]

    # Convert INSTANCE and temperature to numeric
    df['INSTANCE'] = df['INSTANCE'].astype('category').cat.codes  # Convert to category codes (int)
    df['temperature'] = df['temperature'].astype(float)  # Assuming temperature is already float, if not convert

    # Create a group column based on "INSTANCE" and "temperature"
    df['group'] = df['INSTANCE'].astype(str) + '_' + df['temperature'].astype(str)

    # Filter out groups with fewer than 9 x values
    group_counts = df['group'].value_counts()
    valid_groups = group_counts[group_counts >= 9].index
    df = df[df['group'].isin(valid_groups)]

    # Prepare the data for prediction
    unique_groups = df['group'].unique()
    X = []

    for group in unique_groups:
        group_data = df[df['group'] == group]
        if len(group_data) == 9:  # Ensure there are exactly 9 rows for prediction
            X.append(group_data[['INSTANCE', 'temperature', 'voltage', 'value']].values)

    # Convert to numpy array
    X = np.array(X).reshape(-1, 4)  # Reshape if necessary (4 features: INSTANCE, temperature, voltage, value)

    # Standardize the new dataset
    X_scaled = scaler.transform(X)

    # Predict anomalies using the pre-trained model
    y_pred = mlp.predict(X_scaled)

    # Add the predictions to the original dataframe
    df['isAnomaly'] = np.nan
    for i, group in enumerate(unique_groups):
        group_indices = df['group'] == group
        if len(df[group_indices]) == 9:  # Check if group has 9 entries
            df.loc[group_indices, 'isAnomaly'] = y_pred[i]

    # Save the results to a new CSV file
    df.to_csv(output_csv, index=False)
    print(f'Results saved to {output_csv}')

# Example usage
csv1 = 'your_first_input_file.csv'
csv2 = 'your_second_input_file.csv'
output_csv = 'predicted_anomalies.csv'
process_csv_and_predict(csv1, csv2, output_csv)